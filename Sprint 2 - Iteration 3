from tkinter import *
from tkinter import ttk


class Advanced_English_Quiz():
    def __init__(self, parent):
        Name = ""
        Age = 0

        """Widgets for Frame 1"""
        self.home = Frame(parent)
        self.home.grid(row=0, column=0)

        self.title_label = Label(self.home, bg="Green", fg="white", width=105, padx=100, pady=100, height=2,
                                 text="Advanced English Quiz", font=("Times", "24", "bold italic"))
        self.title_label.grid(row=0, columnspan=3)
        self.name_label = Label(self.home, bg="white", fg="black", padx=10, pady=20,
                                text="Enter Name: ", font=("Times", "14", "bold"))
        self.name_label.grid(row=4, column=0)

        self.enter_name = Entry(self.home, width=40)
        self.enter_name.grid(row=4, column=1)

        self.age_label = Label(self.home, bg="white", fg="black", padx=10, pady=20,
                               text="Enter Age: ", font=("Times", "14", "bold"))
        self.age_label.grid(row=8, column=0)
        self.enter_age = Entry(self.home, width=40)
        self.enter_age.grid(row=8, column=1)
        self.next_button = ttk.Button(self.home, text="Next", command=lambda: [self.show_english()])
        self.next_button.grid(row=20, column=2)

        self.difficulty = Label(self.home, bg="white", fg="black", padx=10, pady=20,
                                text="Choose difficulty: ", font=("Times", "14", "bold"))
        self.difficulty.grid(row=12, column=0, columnspan=1)
        self.difficulty = ["English", "History", "Geography"]
        self.diff_level = StringVar()
        self.diff_level.set(0)
        self.diff_buttons = []

        for a in range(len(self.difficulty)):
            self.difficulty_buttons = Radiobutton(self.home, fg="black", text=self.difficulty[a], width=10, padx=10,
                                                  pady=20,
                                                  height=2, value=a, font=("Times", "14", "bold"))
            self.difficulty_buttons.grid(row=a + 12, column=1, sticky=NSEW)

        """Widgets for Frame 2"""
        # Dont put grid when making a new frame in the def init, put it in a separate function and call that function with a button
        self.english = Frame(parent)
        self.english_label = Label(self.english, fg="white", bg="green", width=125, padx=100, pady=100,
                                   height=1, text="English Questions", font=("Times", "20", "bold"))
        self.english_label.grid(columnspan=3, row=0)
        self.english_answer = Entry(self.english, width=20)
        self.english_answer.grid(row=2, column=1)
        self.english_answer.focus()
        self.english_answer_label = Label(self.english, text="Answer:", font=("times", "12", "bold"))
        self.english_answer_label.grid(row=4, column=1)

        Frame(English)



    def show_english(self):
        self.home.grid_remove()
        self.english.grid()


    def __init__(self, question, answers, correctLetter):
        self.question = question
        self.answers = answers
        self.correctLetter = correctLetter

    def check(self, letter, view):
        global score
        if(letter == self.correctLetter):
            label = Label(view, text="Right!")
            score += 1
        else:
            label = Label(view, text="Wrong!")
        label.pack()
        view.after(1000, lambda *args: self.unpackView(view))


    def getView(self, window):
        view = Frame(window)
        Label(view, text=self.question).pack()
        Button(view, text=self.answers[0], command=lambda *args: self.check("A", view)).pack()
        Button(view, text=self.answers[1], command=lambda *args: self.check("B", view)).pack()
        Button(view, text=self.answers[2], command=lambda *args: self.check("C", view)).pack()
        Button(view, text=self.answers[3], command=lambda *args: self.check("D", view)).pack()
        return view

    def unpackView(self, view):
        view.pack_forget()
        askQuestion()

def askQuestion():
    global questions, window, index, button, score, number_of_questions
    if(len(questions) == index + 1):
        Label(window, text="Thank you for answering the questions. " + str(score) + " of " + str(number_of_questions) + " questions answered right").pack()
        return
    button.pack_forget()
    index += 1
    questions[index].getView(window).pack()

questions = []
file = open("Questions.txt", "r")
line = file.readline()
while(line != ""):
    questionString = line
    answers = []
    for i in range (4):
        answers.append(file.readline())

    correctLetter = file.readline()
    correctLetter = correctLetter[:-1]
    questions.append(self.english(questionString, answers, correctLetter))
    line = file.readline()
file.close()
index = -1
score = 0
number_of_questions = len(questions)

def show_frame(self):
    global Name
    age = self.enter_age.get()

    try:
        self.error_label.grid_remove()

    except:
        pass

    try:
        Age = int(age)
        if Age > 18:
            self.error_label = Label(self.home, text="You are not an appropriate age", fg="red",
                                         font=("times", "10", "bold"))
            self.error_label.grid(column=3, row=8)
        elif Age < 14:
            self.error_label = Label(self.home, text="You are not an appropriate age", fg="red",
                                         font=("times", "10", "bold"))
            self.error_label.grid(column=3, row=8)

    except:
        self.error_label = Label(self.home, text="This is an invalid request", fg="red",
                                     font=("times", "10", "bold"))
        self.error_label.grid(column=3, row=8)



def show_history(self):
    self.home.grid_remove()
    self.history.grid()

def show_geography(self):
    self.home.grid_remove()
    self.geography.grid()

if __name__ == "__main__":
    root = Tk()
    frames = Advanced_English_Quiz(root)
    root.geometry("400x350")
    root.title("English Rich Quiz")
    root.mainloop()

    def check_answer_english(self):
        english_answer = self.english_answer.get()
        if english_answer == self.englishanswers[self.english_questions_number]:
            try:
                self.english_incorrect.grid_remove()
            except:
                pass
            try:
                self.english_correct = Label(self.englishquestions, text = "Correct", fg = "Green",
                                             font = ("Times", "12"))
                self.english_correct.grid(row=2, column=0)
                self.english_answer.delete(0, END)
                self.english_questions_number = self.english_questions_number + 1
                self.score = self.score + 1

        else:
            try:
                self.english_correct.grid_remove()
            except:
                pass
            try:
                self.english_incorrect = Label(self.englishquestions, text = "Incorrect", fg = "Red",
                                               font = ("Times", "12"))
                self.english_incorrect.grid(row=2, column=0)
                self.english_answer.delete(0, END)
                self.english_questions_number = self.english_questions_number + 1
                self.score = self.score + 1



