from tkinter import *
from tkinter import ttk
import datetime


class Advanced_English_Quiz():
    def __init__(self, parent):
        Name = None 
        Age = None
        self.score = 0
        self.no_of_questions = 1
        self.english_questions_number = 0
        self.history_questions_number = 0
        self.geography_questions_number = 0
        self.english_answers = ["Peace", "Simile", "First Person", "True", "Assonance"]
        self.history_answers = [1840, "Jacinda Ardern", 2019, "Australian and New Zealand Army Corps", 2011]
        self.geography_answers = ["North Island", "Cape Reinga", "Lake Taupo", "Waikato River", "Mount Cook"]

        """Widgets for Frame 1"""
        self.home = Frame(parent)
        self.home.grid(row=0, column=0)

        self.title_label = Label(self.home, bg="Green", fg="white", width=105, padx=100, pady=100, height=2,
                                 text="Advanced English Quiz", font=("Times", "24", "bold italic"))
        self.title_label.grid(row=0, columnspan=3)
        self.name_label = Label(self.home, bg="white", fg="black", padx=10, pady=20,
                                text="Enter Name: ", font=("Times", "14", "bold"))
        self.name_label.grid(row=4, column=0)

        self.enter_name = Entry(self.home, width=40)
        self.enter_name.grid(row=4, column=1)

        self.age_label = Label(self.home, bg="white", fg="black", padx=10, pady=20,
                               text="Enter Age: ", font=("Times", "14", "bold"))
        self.age_label.grid(row=8, column=0)
        self.enter_age = Entry(self.home, width=40)
        self.enter_age.grid(row=8, column=1)
        self.next_button = ttk.Button(self.home, text="Next", command=lambda: self.show_frame())
        self.next_button.grid(row=20, column=2)
        self.next_button.bind("<Return>", lambda event: self.show_frame())
        self.home.bind("<Return>", lambda event: self.show_frame())

        self.difficulty = Label(self.home, bg="white", fg="black", padx=10, pady=20,
                                text="Choose subject: ", font=("Times", "14", "bold"))
        self.difficulty.grid(row=12, column=0, columnspan=1)
        self.difficulty = ["English", "History", "Geography"]
        self.diff_level = StringVar()
        self.diff_level.set(0)
        self.diff_buttons = []

        for a in range(len(self.difficulty)):
            self.difficulty_buttons = Radiobutton(self.home, fg="black", text=self.difficulty[a], width=10, padx=10,
                                                  pady=20, variable=self.diff_level,
                                                  height=2, value=a, font=("Times", "14", "bold"))
            self.difficulty_buttons.grid(row=a + 12, column=1, sticky=NSEW)

        """Widgets for Frame 2"""
        # Dont put grid when making a new frame in the def init, put it in a separate function and call that function with a button
        self.english = Frame(parent)
        self.english_label = Label(self.english, fg="white", bg="green", width=125, padx=100, pady=100,
                                   height=0, text="English Questions", font=("Times", "20", "bold"))
        self.english_label.grid(columnspan=3, row=0)
        self.english_answer = Entry(self.english, width=40)
        self.english_answer.grid(row=120, column=1)
        self.english_answer.focus()
        self.english_answer_label = Label(self.english, text="Answer:", font=("times", "12", "bold"))
        self.english_answer_label.grid(row=100, column=1)
        self.questions_english = Label(self.english, text=self.englishquestions(), font=('times', "14", "bold"))
        self.questions_english.grid(row=30, column=0)
        self.checkbuttonenglish = ttk.Button(self.english, text="Check", width=10,
                                             command=lambda: self.check_answer_english())
        self.checkbuttonenglish.grid(row=100, column=2)
        self.checkbuttonenglish.bind("<Return>")
        self.homebuttonenglish = ttk.Button(self.english, text="Home", width = 10, command=self.show_home)
        self.homebuttonenglish.grid(row=100, column=0)
        self.homebuttonenglish.bind("<Return>")
        self.current_question = Label(self.english, text="Question: {}/5".format(self.no_of_questions),
                                      fg="white", bg="Green",
                                      font=("times", "12"))
        self.current_question.grid(row=0, column=0)
        self.number_correct = Label(self.english, text="Score: {}/5".format(self.score), fg="black",
                                    font=("times", "14", "bold"))
        self.number_correct.grid(row=0, column=2)
        self.current_subject = StringVar()

        """Widgets for Frame 3"""
        self.history = Frame(parent)
        self.history_label = Label(self.history, fg="white", bg="green", width=125, padx=100, pady=100,
                                   height=0, text="History Questions", font=("Times", "20", "bold"))
        self.history_label.grid(columnspan=3, row=0)
        self.history_answer = Entry(self.history, width=40)
        self.history_answer.grid(row=120, column=1)
        self.history_answer.focus()
        self.history_answer_label = Label(self.history, text="Answer:", font=("times", "12", "bold"))
        self.history_answer_label.grid(row=100, column=1)
        self.questions_history = Label(self.history, text=self.historyquestions(), font=('times', "14", "bold"))
        self.questions_history.grid(row=30, column=0)
        self.checkbuttonhistory = ttk.Button(self.history, text="Check", width=5,
                                             command=lambda: self.check_answer_history())
        self.checkbuttonhistory.grid(row=100, column=2)
        self.checkbuttonhistory.bind("<Return>")
        self.homebuttonhistory = ttk.Button(self.history, text="Home", command=self.show_home)
        self.homebuttonhistory.grid(row=100, column=0)
        self.current_question = Label(self.history, text="Question: {}/5".format(self.no_of_questions),
                                      fg="white", bg="Green",
                                      font=("times", "12"))
        self.current_question.grid(row=0, column=0)
        self.number_correct = Label(self.history, text="Score: {}/5".format(self.score), fg="black",
                                    font=("times", "14", "bold"))
        self.number_correct.grid(row=0, column=2)
        """Widgets for Frame 4"""
        self.geography = Frame(parent)
        self.geography_label = Label(self.geography, fg="white", bg="green", width=125, padx=100, pady=100,
                                     height=0, text="Geography Questions", font=("Times", "20", "bold"))
        self.geography_label.grid(columnspan=3, row=0)
        self.geography_answer = Entry(self.geography, width=40)
        self.geography_answer.grid(row=120, column=1)
        self.geography_answer.focus()
        self.geography_answer_label = Label(self.geography, text="Answer:", font=("times", "12", "bold"))
        self.geography_answer_label.grid(row=100, column=1)
        self.questions_geography = Label(self.geography, text=self.geographyquestions(), font=('times', "14", "bold"))
        self.questions_geography.grid(row=30, column=0)
        self.checkbuttongeography = ttk.Button(self.geography, text="Check", width=5,
                                               command=lambda: self.check_answer_geography())
        self.checkbuttongeography.grid(row=100, column=2)
        self.checkbuttongeography.bind("<Return>")
        self.homebuttongeography = ttk.Button(self.geography, text="Home", command=self.show_home)
        self.homebuttongeography.grid(row=100, column=0)
        self.current_question = Label(self.geography, text="Question: {}/5".format(self.no_of_questions),
                                      fg="white", bg="Green",
                                      font=("times", "12"))
        self.current_question.grid(row=0, column=0)
        self.number_correct = Label(self.geography, text="Score: {}/5".format(self.score), fg="black",
                                    font=("times", "14", "bold"))
        self.number_correct.grid(row=0, column=2)
        """Widgets for Frame 5"""

        self.results = Frame(parent)
        self.results_label = Label(self.results, bg="green", fg="white", width=125, padx=100, pady=100,
                                   height=0, text="Results", font=("Times", "20", "bold"))
        self.results_label.grid(columnspan=4, row=0)
        self.final_name_label = Label(self.results, fg="black", text="Name", font=("times", "14", "bold"))
        self.final_name_label.grid(row=3, column=0)
        self.final_score_label = Label(self.results, fg="black", text="Score", font=("times", "14", "bold"))
        self.final_score_label.grid(row=3, column=3)
        self.finish_button = ttk.Button(self.results, text="Finish", command=exit)
        self.finish_button.grid(row=100, column=0)
        self.subject_title = Label(self.results, fg="black", text="Subject", font=("times", "14", "bold"))
        self.subject_title.grid(row=3, column=2)
        self.subject_label = Label(self.results, fg="black", textvariable=self.current_subject,
                                   font=("times", "8"))
        self.subject_label.grid(row=5, column=2)
        self.datetoday = datetime.datetime.now()
        self.dateyear = self.datetoday.year
        self.datemonth = self.datetoday.month
        self.datemonthday = self.datetoday.strftime("%B")
        self.dateheading = Label(self.results, text="Date", fg="black", font=("times", "14", "bold"))
        self.dateheading.grid(row=3, column=1)
        self.datelabel = Label(self.results,
                               text="{} {} {}".format(self.datemonthday, self.datemonth, self.dateyear), fg="black",
                               font=("times", "8"))
        self.datelabel.grid(row=5, column=1)








    def show_frame(self):
        global Name, Age
        age = self.enter_age.get()
        Name = self.enter_name.get()

        try:
            self.error_label.grid_remove()

        except:
            pass

        try:
            Age = int(age)

            if Age > 18:
                self.error_label = Label(self.home, text="You are not an appropriate age", fg="red",
                                         font=("times", "10", "bold"))
                self.error_label.grid(row=14, column=2)
            elif Age < 14:
                self.error_label = Label(self.home, text="You are not an appropriate age", fg="red",
                                         font=("times", "10", "bold"))
                self.error_label.grid(row=14, column=2)
            else:
                Name = self.enter_name.get()
                option = self.diff_level.get()
                if option == "0":
                    self.home.grid_remove()
                    self.english.grid()
                    self.current_subject.set("English")
                elif option == "1":
                    self.home.grid_remove()
                    self.history.grid()
                    self.current_subject.set("History")
                else:
                    self.home.grid_remove()
                    self.geography.grid()
                    self.current_subject.set("Geography")

        except:
            self.error_label = Label(self.home, text="This is an invalid request", fg="red",
                                     font=("times", "10", "bold"))
            self.error_label.grid(column=3, row=8)

    def show_home(self):
        self.score = 0
        self.no_of_questions = 1
        self.english_questions_number = 0
        self.history_questions_number = 0
        self.geography_questions_number = 0
        try:
            self.english.grid_remove()
        except:
            pass
        try:
            self.history.grid_remove()
        except:
            pass
        try:
            self.geography.grid_remove()
        except:
            pass
        self.home.grid()

    def next_question(self, frame, question):
        self.questions_english.grid_remove()
        self.questions_english = Label(frame, text=question, font=('Times', '12', 'bold'))
        self.questions_english.grid(row=1, column=0)
        self.questions_history.grid_remove()
        self.questions_history = Label(frame, text=question, font=('Times', '12', 'bold'))
        self.questions_history.grid(row=1, column=0)
        self.questions_geography.grid_remove()
        self.questions_geography = Label(frame, text=question, font=('Times', '12', 'bold'))
        self.questions_geography.grid(row=1, column=0)
        self.number_correct.grid_remove()
        self.number_correct = Label(frame, text="Score: {}".format(self.score), fg="black",
                                    font=("times", "14", "bold"))
        self.number_correct.grid(row=0, column=2)
        self.current_question.grid_remove()
        self.current_question = Label(frame, text="Question: {}/5".format(self.no_of_questions), bg="white", fg="black",
                                      font=("times", "12", "bold"))
        self.current_question.grid(row=0, column=0)

    def show_english(self):
        self.home.grid_remove()
        self.english.grid()

    def englishquestions(self):
        global questions_english
        english_questions_file = open("EnglishQuestions.txt", "r")
        english_content = english_questions_file.read()
        questions_english = english_content.split("*")
        return questions_english[self.english_questions_number]

    def check_answer_english(self):
        english_answer = self.english_answer.get()
        if english_answer == self.english_answers[self.english_questions_number]:
            try:
                self.english_incorrect.grid_remove()

            except:
                pass
            try:
                self.english_correct = Label(self.english, text="Correct", fg="Green",
                                             font=("Times", "12"))
                self.english_correct.grid(row=8, column=2)
                self.english_answer.delete(0, END)
                self.english_questions_number = self.english_questions_number + 1
                self.no_of_questions = self.no_of_questions + 1
                self.score = self.score + 1
                self.next_question(self.english, self.englishquestions())

            except:
                self.english.grid_remove()
                self.results.grid()
                self.final_score = Label(self.results, fg="black", text="{}/5".format(self.score),
                                        font=("times", "8"))
                self.final_score.grid(row=5, column=3)
                self.final_name = Label(self.results, fg="black", text=Name, font=("times", "8",))
                self.final_name.grid(row=5, column=0)
                self.result = str(self.score)
                Age = str(self.enter_age.get())
                with open('studentresults.txt', 'a+') as data_file:
                    data_file.write(self.enter_name.get() + ' ' + Age + ' ' + self.result + ' ' + '\n')
                    data_file.close()





        else:
            try:
                self.english_correct.grid_remove()
            except:
                pass
            try:
                self.english_incorrect = Label(self.english, text="Incorrect", fg="Red",
                                               font=("Times", "12"))
                self.english_incorrect.grid(row=8, column=2)
                self.english_answer.delete(0, END)
                self.english_questions_number = self.english_questions_number + 1
                self.no_of_questions = self.no_of_questions + 1
                self.next_question(self.english, self.englishquestions())

            except:
                self.english.grid_remove()
                self.results.grid()
                self.final_score = Label(self.results, fg="black", text="{}/5".format(self.score),
                                        font=("times", "8"))
                self.final_score.grid(row=5, column=3)
                self.final_name = Label(self.results, fg="black", text=Name, font=("times", "8",))
                self.final_name.grid(row=5, column=0)
                self.result = str(self.score)
                Age = str(self.enter_age.get())
                with open('studentresults.txt', 'a+') as data_file:
                    data_file.write(self.enter_name.get() + ' ' + Age + ' ' + self.result + ' ' + '\n')
                    data_file.close()


    def show_history(self):
        self.home.grid_remove()
        self.history.grid()

    def historyquestions(self):
        global questions_history
        history_questions_file = open("HistoryQuestions.txt", "r")
        history_content = history_questions_file.read()
        questions_history = history_content.split("*")
        return questions_history[self.history_questions_number]

    def check_answer_history(self):
        history_answer = self.history_answer.get()
        if history_answer == self.history_answers[self.history_questions_number]:
            try:
                self.history_incorrect.grid_remove()

            except:
                pass
            try:
                self.history_correct = Label(self.history, text="Correct", fg="Green",
                                             font=("Times", "12"))
                self.history_correct.grid(row=8, column=2)
                self.history_answer.delete(0, END)
                self.history_questions_number = self.history_questions_number + 1
                self.no_of_questions = self.no_of_questions + 1
                self.score = self.score + 1
                self.next_question(self.history, self.historyquestions())

            except:
                self.history.grid_remove()
                self.results.grid()
                self.final_score = Label(self.results, fg="black", text="{}/5".format(self.score),
                                        font=("times", "8"))
                self.final_score.grid(row=5, column=7)
                self.final_name = Label(self.results, fg="black", text=Name, font=("times", "8",))
                self.final_name.grid(row=5, column=0)
                self.result = str(self.score)
                Age = str(self.enter_age.get())
                with open('studentresults.txt', 'a+') as data_file:
                    data_file.write(self.enter_name.get() + ' ' + Age + ' ' + self.result + ' ' + '\n')
                    data_file.close()


        else:
            try:
                self.history_correct.grid_remove()
            except:
                pass
            try:
                self.history_incorrect = Label(self.history, text="Incorrect", fg="Red",
                                               font=("Times", "12"))
                self.history_incorrect.grid(row=8, column=2)
                self.history_answer.delete(0, END)
                self.history_questions_number = self.history_questions_number + 1
                self.no_of_questions = self.no_of_questions + 1
                self.next_question(self.history, self.historyquestions())

            except:
                self.history.grid_remove()
                self.results.grid()
                self.final_score = Label(self.results, fg="black", text="{}/5".format(self.score),
                                        font=("times", "8"))
                self.final_score.grid(row=5, column=7)
                self.final_name = Label(self.results, fg="black", text=Name, font=("times", "8",))
                self.final_name.grid(row=5, column=0)
                self.result = str(self.score)
                Age = str(self.enter_age.get())
                with open('studentresults.txt', 'a+') as data_file:
                    data_file.write(self.enter_name.get() + ' ' + Age + ' ' + self.result + ' ' + '\n')
                    data_file.close()

    def show_geography(self):
        self.home.grid_remove()
        self.geography.grid()

    def geographyquestions(self):
        global questions_geography
        geography_questions_file = open("GeographyQuestions.txt", "r")
        geography_content = geography_questions_file.read()
        questions_geography = geography_content.split("*")
        return questions_geography[self.geography_questions_number]

    def check_answer_geography(self):
        geography_answer = self.geography_answer.get()
        if geography_answer == self.geography_answers[self.geography_questions_number]:
            try:
                self.geography_incorrect.grid_remove()

            except:
                pass
            try:
                self.geography_correct = Label(self.geography, text="Correct", fg="Green",
                                               font=("Times", "12"))
                self.geography_correct.grid(row=8, column=2)
                self.geography_answer.delete(0, END)
                self.geography_questions_number = self.geography_questions_number + 1
                self.no_of_questions = self.no_of_questions + 1
                self.score = self.score + 1
                self.next_question(self.geography, self.geographyquestions())

            except:
                self.geography.grid_remove()
                self.results.grid()
                self.final_score = Label(self.results, fg="black", text="{}/5".format(self.score),
                                        font=("times", "8"))
                self.final_score.grid(row=5, column=7)
                self.final_name = Label(self.results, fg="black", text=Name, font=("times", "8",))
                self.final_name.grid(row=5, column=0)
                self.result = str(self.score)
                Age = str(self.enter_age.get())
                with open('studentresults.txt', 'a+') as data_file:
                    data_file.write(self.enter_name.get() + ' ' + Age + ' ' + self.result + ' ' + '\n')
                    data_file.close()

        else:
            try:
                self.geography_correct.grid_remove()
            except:
                pass
            try:
                self.geography_incorrect = Label(self.geography, text="Incorrect", fg="Red",
                                                 font=("Times", "12"))
                self.geography_incorrect.grid(row=8, column=2)
                self.geography_answer.delete(0, END)
                self.geography_questions_number = self.geography_questions_number + 1
                self.no_of_questions = self.no_of_questions + 1
                self.next_question(self.geography, self.geographyquestions())

            except:
                self.geography.grid_remove()
                self.results.grid()
                self.final_score = Label(self.results, fg="black", text="{}/5".format(self.score),
                                        font=("times", "8"))
                self.final_score.grid(row=5, column=7)
                self.final_name = Label(self.results, fg="black", text=Name, font=("times", "8",))
                self.final_name.grid(row=5, column=0)
                self.result = str(self.score)
                Age = str(self.enter_age.get())
                with open('studentresults.txt', 'a+') as data_file:
                    data_file.write(self.enter_name.get() + ' ' + Age + ' ' + self.result + ' ' + '\n')
                    data_file.close()


if __name__ == "__main__":
    root = Tk()
    frames = Advanced_English_Quiz(root)
    root.geometry("400x350")
    root.title("English Rich Quiz")
    root.mainloop()


